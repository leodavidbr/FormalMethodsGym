IMPLEMENTATION Gym_i
REFINES Gym

CONCRETE_VARIABLES
    
     r_clients
     ,r_workouts
     ,r_exercises
    
    , r_clientHasWorkout
    ,r_clientWorkedOut
    ,r_workoutHasExercise
    ,r_exerciseHasCategory
    ,r_clientHasSolicitation
    ,r_workoutHasCategory
    ,r_isClientNew
    
    , r_szeClient

INVARIANT
    r_clients : CLIENT --> BOOL 
    & clients = dom(r_clients |> {TRUE}) 
    &
    r_workouts : WORKOUT --> BOOL
    & workouts = dom(r_workouts |> {TRUE})
    &
    r_exercises: EXERCISE --> BOOL 
    & exercises = dom(r_exercises |> {TRUE})
    &
    r_exerciseHasCategory : EXERCISE --> CATEGORY 
    & !ex. ((ex : EXERCISE & ex : exercises) => 
        (r_exerciseHasCategory(ex) = exerciseHasCategory(ex)))
    &
    r_clientHasSolicitation : CLIENT --> SOLICITATION
    & !cl. ((cl : CLIENT & cl : clients) => 
        (r_clientHasSolicitation(cl) = clientHasSolicitation(cl)))
    &
    r_workoutHasCategory : WORKOUT --> CATEGORY
    & !wr. ((wr : WORKOUT & wr : workouts) => 
        (r_workoutHasCategory(wr) = workoutHasCategory(wr)))
    &
     r_isClientNew : CLIENT --> SOLICITATION
    & !cl. ((cl : CLIENT & cl : clients) 
        => (r_workoutHasCategory(cl) = workoutHasCategory(cl)))
    
    & 
    r_clientHasWorkout : CLIENT * WORKOUT --> BOOL
    & !(cl, wr) .( (cl : CLIENT & wr : WORKOUT & cl : clients & wr : workouts) 
        => clientHasWorkout = dom(r_clientHasWorkout |> {TRUE}) )
    
    & 
    r_clientWorkedOut : CLIENT * WORKOUT --> BOOL 
    & !(cl, wr) .( (cl : CLIENT & wr : WORKOUT & cl : clients) 
    => ( wr : clientWorkedOut[{cl}] <=> (r_clientWorkedOut(cl,wr) = TRUE) ) )

    & 
    r_workoutHasExercise : WORKOUT * EXERCISE --> BOOL 
    & !(wr, ex) .( (wr : WORKOUT  & ex : EXERCISE & wr : workouts & ex : exercises) 
    => ( ex : workoutHasExercise[{wr}] <=> (r_workoutHasExercise(wr, ex) = TRUE) ) )

    & r_szeClient = card(CLIENT)

VALUES
    maxClients = 100;
    maxWorkouts = 15;
    maxExercises = 30;
    
    maxExercisesInWorkout = 7;
    maxWorkoutsInHistory = 40;
    exactNumClientWorkouts = 3;
    
    CLIENT = 0..5;
    WORKOUT = 0..5;
    EXERCISE = 0..5; 
    CATEGORY = 0..2;
    
    
    PUSH = 0;
    PULL = 1;
    LEGS = 2; 
    SOLICITATION = BOOL;

    NULL = 0;
    ANYEXERCISE = 0;
    ANYWORKOUT = 0;
    
    VALID_CLIENT = 1..5

INITIALISATION
    r_clients := CLIENT*{FALSE};
    r_workouts := WORKOUT*{FALSE};
    r_exercises := EXERCISE*{FALSE};
    r_exerciseHasCategory := EXERCISE*{ANYEXERCISE};
    r_clientHasSolicitation := CLIENT*{FALSE};
    r_workoutHasCategory := WORKOUT*{ANYWORKOUT};
    r_isClientNew := CLIENT*{TRUE};
    r_clientHasWorkout := (CLIENT*WORKOUT)*{FALSE};
    r_clientWorkedOut := (CLIENT*WORKOUT)*{FALSE};
    r_workoutHasExercise := (WORKOUT*EXERCISE)*{FALSE};
    
    r_szeClient := 6

OPERATIONS

// TODO : para todo r_clientHasWorkout(client*workoutx) := FALSE            
// TODO : para todo r_clientWorkedOUt(client*workoutx) := FALSE  
        addClient(client) = 
        BEGIN
            r_clients(client) := TRUE;
            r_clientHasSolicitation(client) := TRUE;
            r_isClientNew(client) := TRUE;
            //!workoutx r_clientHasWorkout(client*workoutx) = FALSE
            VAR nn IN
                nn := 0;
                WHILE nn <= r_szeClient DO
                    r_clientHasWorkout(client, nn) := FALSE
                INVARIANT
                    !workoutx. (workoutx : 0..nn => r_clientHasWorkout(client, workoutx) = FALSE)
                VARIANT
                    r_szeClient +2 - nn
                END
            END
        END;
//                WHILE nn <=  
//                    
//                END

////            WHILE i <= n DO
//      sum := sum + i;
//      i := i + 1
//    INVARIANT
//      sum : INTEGER & i : INTEGER & n : INTEGER & i <= n + 1
//    VARIANT
//      n - i + 1


        // Como nas invariantes de ligacao somente nos importamos com client que pertenca a clients nos relacionamentos e funcoes (na maquina o dominio/contradominio sao clients, quando o client eh removido de r_clients tudo da certo. Mas em compensacao precisamos inicializar corretamente ao cadastrar um client
        // Provas ok (eu acho)
        removeClient(client) = 
        BEGIN
            r_clients(client) := FALSE
        END;
        
        
//        addWorkout(workout, category, exercisesInWorkout) = skip;

        // Acontece aqui o mesmo que com o removeClient. A remocao eh simples, a adicao complexa.
        removeWorkout(workout) = 
        BEGIN
          r_workouts(workout) := FALSE
        END;

        // VERIFICAR questao de inicializacao
        // TODO: r_workoutHasExercise
        // TODO: r_exerciseHasCategory
        addExercise(exercise, category) = 
        BEGIN
            r_exercises(exercise) := TRUE;
            r_exerciseHasCategory(exercise) := category
        END;

        // Provas ok (eu acho)
        removeExercise(exercise) = 
        BEGIN
            r_exercises(exercise) := FALSE
        END;

        askForWorkout(client) = 
        BEGIN
            r_clientHasSolicitation(client) := TRUE
        END;
        
        workoutLog <-- getWorkoutLog(client) = skip;

        clientsWithSolicitation <-- getClientsWithWorkoutSolicitations = skip;
        
        defineClientWorkouts(client, workoutPush, workoutPull, workoutLeg) = skip
 END