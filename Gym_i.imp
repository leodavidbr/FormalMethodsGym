IMPLEMENTATION Gym_i
REFINES Gym
    
CONSTANTS
    r_maximumClient,
    r_maximumWorkout,
    r_maximumExercise
    
PROPERTIES
    r_maximumClient = SZE_CLIENT - 1
    & r_maximumWorkout = SZE_WORKOUT - 1
    & r_maximumExercise = SZE_EXERCISE -1
    
CONCRETE_VARIABLES
    
    r_clients
    ,r_workouts
    ,r_exercises
    
    , r_clientHasWorkout
    ,r_clientWorkedOut
    ,r_workoutHasExercise
    ,r_exerciseHasCategory
    ,r_clientHasSolicitation
    ,r_workoutHasCategory
    ,r_isClientNew
    
    
    
INVARIANT
    r_clients : CLIENT --> BOOL 
    & clients = dom(r_clients |> {TRUE}) 
    &
    r_workouts : WORKOUT --> BOOL
    & workouts = dom(r_workouts |> {TRUE})
    &
    r_exercises: EXERCISE --> BOOL 
    & exercises = dom(r_exercises |> {TRUE})
    &
    r_exerciseHasCategory : EXERCISE --> CATEGORY 
    & !ex. ((ex : EXERCISE & ex : exercises) => 
        (r_exerciseHasCategory(ex) = exerciseHasCategory(ex)))
    &
    r_clientHasSolicitation : CLIENT --> SOLICITATION
    & !cl. ((cl : CLIENT & cl : clients) => 
        (r_clientHasSolicitation(cl) = clientHasSolicitation(cl)))
    &
    r_workoutHasCategory : WORKOUT --> CATEGORY
    & !wr. ((wr : WORKOUT & wr : workouts) => 
        (r_workoutHasCategory(wr) = workoutHasCategory(wr)))
    &
    r_isClientNew : CLIENT --> BOOL
    & !cl. ((cl : CLIENT & cl : clients) 
        => (r_workoutHasCategory(cl) = workoutHasCategory(cl)))
    
    & 
    r_clientHasWorkout : CLIENT * WORKOUT --> BOOL
    & !(cl, wr) .( (cl : CLIENT & wr : WORKOUT & cl : clients & wr : workouts) 
        => clientHasWorkout = dom(r_clientHasWorkout |> {TRUE}) )
    
    & 
    r_clientWorkedOut : CLIENT * WORKOUT --> BOOL 
    & !(cl, wr) .( (cl : CLIENT & wr : WORKOUT & cl : clients) 
        => ( wr : clientWorkedOut[{cl}] <=> (r_clientWorkedOut(cl,wr) = TRUE) ) )
    
    & 
    r_workoutHasExercise : WORKOUT * EXERCISE --> BOOL 
    & !(wr, ex) .( (wr : WORKOUT  & ex : EXERCISE & wr : workouts & ex : exercises) 
        => ( ex : workoutHasExercise[{wr}] <=> (r_workoutHasExercise(wr, ex) = TRUE) ) )
    
    //    & r_maximumClient = SZE_CLIENT -1
    
    
    
VALUES
    maxClients = 100;
    maxWorkouts = 15;
    maxExercises = 30;
    
    maxExercisesInWorkout = 7;
    maxWorkoutsInHistory = 40;
    exactNumClientWorkouts = 3;
    
    SZE_CLIENT = 5;
    SZE_WORKOUT = 5;
    SZE_EXERCISE = 5;
    
    r_maximumClient = SZE_CLIENT - 1;
    r_maximumWorkout = SZE_WORKOUT - 1;
    r_maximumExercise = SZE_EXERCISE - 1;
    
    
    CLIENT = 0..r_maximumClient;
    WORKOUT = 0..r_maximumWorkout;
    EXERCISE = 0..r_maximumExercise; 
    CATEGORY = 0..2;
    
    
    PUSH = 0;
    PULL = 1;
    LEGS = 2; 
    
    YES = 1; 
    NO = 0;
    
    SOLICITATION = NO..YES;
    
    NULL = 0;
    ANYEXERCISE = 0;
    ANYWORKOUT = 0
    
    
INITIALISATION
    r_clients := CLIENT*{FALSE};
    r_workouts := WORKOUT*{FALSE};
    r_exercises := EXERCISE*{FALSE};
    r_exerciseHasCategory := EXERCISE*{ANYEXERCISE};
    r_clientHasSolicitation := CLIENT*{NO};
    r_workoutHasCategory := WORKOUT*{ANYWORKOUT};
    r_isClientNew := CLIENT*{TRUE};
    r_clientHasWorkout := (CLIENT*WORKOUT)*{FALSE};
    r_clientWorkedOut := (CLIENT*WORKOUT)*{FALSE};
    r_workoutHasExercise := (WORKOUT*EXERCISE)*{FALSE}
    
    
OPERATIONS
    
    // OK (acho)
    addClient(client) = 
    BEGIN
        r_clients(client) := TRUE;
        r_clientHasSolicitation(client) := YES;
        r_isClientNew(client) := TRUE;
        // !workoutx r_clientHasWorkout(client*workoutx) = FALSE
        // Na pratica so precisa de !workoutx : workouts, mas assim eh mais facil e da certo
        VAR ww, maximumWorkout IN
            ww := 0;
            maximumWorkout := SZE_WORKOUT-1; 
            WHILE ww <= maximumWorkout DO
                r_clientHasWorkout(client, ww) := FALSE;
                ww := ww + 1
            INVARIANT
                r_clientHasWorkout : CLIENT * WORKOUT --> BOOL
                & ww : 0..SZE_WORKOUT
                & !workoutx. (workoutx : 0..(ww-1) 
                    //                        & (client |-> workoutx : dom(r_clientHasWorkout)) 
                    => r_clientHasWorkout(client, workoutx) = FALSE)
            VARIANT
                SZE_WORKOUT - ww +2
            END
        END;
        
        //!workoutx r_clientWorkedOut(client*workoutx) := FALSE 
        VAR ww, maximumWorkout IN
            ww := 0;
            maximumWorkout := SZE_WORKOUT-1;
            WHILE ww <= maximumWorkout DO
                r_clientWorkedOut(client, ww) := FALSE;
                ww := ww + 1
            INVARIANT
                r_clientWorkedOut : CLIENT * WORKOUT --> BOOL
                & ww : 0..SZE_WORKOUT
                & !workoutx. (workoutx : 0..(ww-1) 
                    //                        & (client |-> workoutx : dom(r_clientWorkedOut)) 
                    => r_clientWorkedOut(client, workoutx) = FALSE)
            VARIANT
                SZE_WORKOUT - ww +2
            END
        END
        
    END;
    
    // Como nas invariantes de ligacao somente nos importamos com client que pertenca a clients nos relacionamentos e funcoes (na maquina o dominio/contradominio sao clients, quando o client eh removido de r_clients tudo da certo. Mas em compensacao precisamos inicializar corretamente ao cadastrar um client
    // Provas ok (eu acho)
    removeClient(client) = 
    BEGIN
        r_clients(client) := FALSE
    END;
    
    
    //        addWorkout(workout, category, exercisesInWorkout) = skip;
    
    // Acontece aqui o mesmo que com o removeClient. A remocao eh simples, a adicao complexa.
    removeWorkout(workout) = 
    BEGIN
        r_workouts(workout) := FALSE
    END;
    
    // VERIFICAR questao de inicializacao
    // TODO: r_workoutHasExercise
    // TODO: r_exerciseHasCategory
    addExercise(exercise, category) = 
    BEGIN
        r_exercises(exercise) := TRUE;
        r_exerciseHasCategory(exercise) := category
    END;
    
    // Provas ok (eu acho)
    removeExercise(exercise) = 
    BEGIN
        r_exercises(exercise) := FALSE
    END;
    
    askForWorkout(client) = 
    BEGIN
        r_clientHasSolicitation(client) := YES
    END;
    
    //        workoutLog <-- getWorkoutLog(client) = skip;
    
    //        clientsWithSolicitation <-- getClientsWithWorkoutSolicitations = skip;
    
    defineClientWorkouts(client, workoutPush, workoutPull, workoutLeg) = skip
END